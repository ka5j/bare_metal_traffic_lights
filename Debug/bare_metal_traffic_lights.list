
bare_metal_traffic_lights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003cc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000590  08000598  00001598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000590  08000590  00001598  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000590  08000590  00001598  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000590  08000598  00001598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000590  08000590  00001590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000594  08000594  00001594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000598  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000598  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007a1  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000250  00000000  00000000  00001d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f0  00000000  00000000  00001fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000a3  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001368  00000000  00000000  00002153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014dc  00000000  00000000  000034bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0a5c  00000000  00000000  00004997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c53f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000238  00000000  00000000  000c5438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000c5670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000578 	.word	0x08000578

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000578 	.word	0x08000578

08000204 <main>:
void RCC_Init(void);
void GPIOC_Init(void);
void SysTick_Init(void);
void SysTick_Set_Counter(uint32_t);

int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	RCC_Init();
 8000208:	f000 f806 	bl	8000218 <RCC_Init>

	GPIOC_Init();
 800020c:	f000 f814 	bl	8000238 <GPIOC_Init>

	SysTick_Init();
 8000210:	f000 f87c 	bl	800030c <SysTick_Init>

	while(1);
 8000214:	bf00      	nop
 8000216:	e7fd      	b.n	8000214 <main+0x10>

08000218 <RCC_Init>:
}

void RCC_Init(void){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	RCC_AHB1ENR |= (1 << 2);
 800021c:	4b05      	ldr	r3, [pc, #20]	@ (8000234 <RCC_Init+0x1c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a04      	ldr	r2, [pc, #16]	@ (8000234 <RCC_Init+0x1c>)
 8000222:	f043 0304 	orr.w	r3, r3, #4
 8000226:	6013      	str	r3, [r2, #0]
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40023830 	.word	0x40023830

08000238 <GPIOC_Init>:

void GPIOC_Init(void){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	GPIOC_MODER &= ~(3 << (5 * 2));
 800023c:	4b2f      	ldr	r3, [pc, #188]	@ (80002fc <GPIOC_Init+0xc4>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a2e      	ldr	r2, [pc, #184]	@ (80002fc <GPIOC_Init+0xc4>)
 8000242:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000246:	6013      	str	r3, [r2, #0]
	GPIOC_MODER &= ~(3 << (6 * 2));
 8000248:	4b2c      	ldr	r3, [pc, #176]	@ (80002fc <GPIOC_Init+0xc4>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a2b      	ldr	r2, [pc, #172]	@ (80002fc <GPIOC_Init+0xc4>)
 800024e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000252:	6013      	str	r3, [r2, #0]
	GPIOC_MODER &= ~(3 << (8 * 2));
 8000254:	4b29      	ldr	r3, [pc, #164]	@ (80002fc <GPIOC_Init+0xc4>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a28      	ldr	r2, [pc, #160]	@ (80002fc <GPIOC_Init+0xc4>)
 800025a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800025e:	6013      	str	r3, [r2, #0]
	GPIOC_MODER |= (1 << (5 * 2));
 8000260:	4b26      	ldr	r3, [pc, #152]	@ (80002fc <GPIOC_Init+0xc4>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a25      	ldr	r2, [pc, #148]	@ (80002fc <GPIOC_Init+0xc4>)
 8000266:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800026a:	6013      	str	r3, [r2, #0]
	GPIOC_MODER |= (1 << (6 * 2));
 800026c:	4b23      	ldr	r3, [pc, #140]	@ (80002fc <GPIOC_Init+0xc4>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a22      	ldr	r2, [pc, #136]	@ (80002fc <GPIOC_Init+0xc4>)
 8000272:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000276:	6013      	str	r3, [r2, #0]
	GPIOC_MODER |= (1 << (8 * 2));
 8000278:	4b20      	ldr	r3, [pc, #128]	@ (80002fc <GPIOC_Init+0xc4>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a1f      	ldr	r2, [pc, #124]	@ (80002fc <GPIOC_Init+0xc4>)
 800027e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000282:	6013      	str	r3, [r2, #0]

	GPIOC_OTYPER &= ~(3 << 5);
 8000284:	4b1e      	ldr	r3, [pc, #120]	@ (8000300 <GPIOC_Init+0xc8>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a1d      	ldr	r2, [pc, #116]	@ (8000300 <GPIOC_Init+0xc8>)
 800028a:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800028e:	6013      	str	r3, [r2, #0]
	GPIOC_OTYPER &= ~(3 << 6);
 8000290:	4b1b      	ldr	r3, [pc, #108]	@ (8000300 <GPIOC_Init+0xc8>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a1a      	ldr	r2, [pc, #104]	@ (8000300 <GPIOC_Init+0xc8>)
 8000296:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800029a:	6013      	str	r3, [r2, #0]
	GPIOC_OTYPER &= ~(3 << 8);
 800029c:	4b18      	ldr	r3, [pc, #96]	@ (8000300 <GPIOC_Init+0xc8>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a17      	ldr	r2, [pc, #92]	@ (8000300 <GPIOC_Init+0xc8>)
 80002a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80002a6:	6013      	str	r3, [r2, #0]

	GPIOC_OSPEEDR &= ~(3 << (5 * 2));
 80002a8:	4b16      	ldr	r3, [pc, #88]	@ (8000304 <GPIOC_Init+0xcc>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a15      	ldr	r2, [pc, #84]	@ (8000304 <GPIOC_Init+0xcc>)
 80002ae:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOC_OSPEEDR &= ~(3 << (6 * 2));
 80002b4:	4b13      	ldr	r3, [pc, #76]	@ (8000304 <GPIOC_Init+0xcc>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a12      	ldr	r2, [pc, #72]	@ (8000304 <GPIOC_Init+0xcc>)
 80002ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80002be:	6013      	str	r3, [r2, #0]
	GPIOC_OSPEEDR &= ~(3 << (8 * 2));
 80002c0:	4b10      	ldr	r3, [pc, #64]	@ (8000304 <GPIOC_Init+0xcc>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000304 <GPIOC_Init+0xcc>)
 80002c6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80002ca:	6013      	str	r3, [r2, #0]

	GPIOC_PUPDR &= ~(3 << (5 * 2));
 80002cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000308 <GPIOC_Init+0xd0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000308 <GPIOC_Init+0xd0>)
 80002d2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOC_PUPDR &= ~(3 << (6 * 2));
 80002d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <GPIOC_Init+0xd0>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000308 <GPIOC_Init+0xd0>)
 80002de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80002e2:	6013      	str	r3, [r2, #0]
	GPIOC_PUPDR &= ~(3 << (8 * 2));
 80002e4:	4b08      	ldr	r3, [pc, #32]	@ (8000308 <GPIOC_Init+0xd0>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a07      	ldr	r2, [pc, #28]	@ (8000308 <GPIOC_Init+0xd0>)
 80002ea:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80002ee:	6013      	str	r3, [r2, #0]

}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40020800 	.word	0x40020800
 8000300:	40020804 	.word	0x40020804
 8000304:	40020808 	.word	0x40020808
 8000308:	4002080c 	.word	0x4002080c

0800030c <SysTick_Init>:

void SysTick_Init(void){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	SysTick_Set_Counter(HOLD);
 8000310:	480b      	ldr	r0, [pc, #44]	@ (8000340 <SysTick_Init+0x34>)
 8000312:	f000 f819 	bl	8000348 <SysTick_Set_Counter>
	SYSTICK_CTRL |= (1 << 2);
 8000316:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <SysTick_Init+0x38>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <SysTick_Init+0x38>)
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	6013      	str	r3, [r2, #0]
	SYSTICK_CTRL |= (1 << 1);
 8000322:	4b08      	ldr	r3, [pc, #32]	@ (8000344 <SysTick_Init+0x38>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a07      	ldr	r2, [pc, #28]	@ (8000344 <SysTick_Init+0x38>)
 8000328:	f043 0302 	orr.w	r3, r3, #2
 800032c:	6013      	str	r3, [r2, #0]
	SYSTICK_CTRL |= (1 << 0);
 800032e:	4b05      	ldr	r3, [pc, #20]	@ (8000344 <SysTick_Init+0x38>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a04      	ldr	r2, [pc, #16]	@ (8000344 <SysTick_Init+0x38>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6013      	str	r3, [r2, #0]
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	00f42400 	.word	0x00f42400
 8000344:	e000e010 	.word	0xe000e010

08000348 <SysTick_Set_Counter>:

void SysTick_Set_Counter(uint32_t ticks){
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	SYSTICK_RELOAD = ticks - 1;
 8000350:	4a06      	ldr	r2, [pc, #24]	@ (800036c <SysTick_Set_Counter+0x24>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	3b01      	subs	r3, #1
 8000356:	6013      	str	r3, [r2, #0]
	SYSTICK_CURRENT = 0;
 8000358:	4b05      	ldr	r3, [pc, #20]	@ (8000370 <SysTick_Set_Counter+0x28>)
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	e000e014 	.word	0xe000e014
 8000370:	e000e018 	.word	0xe000e018

08000374 <SysTick_Handler>:

void SysTick_Handler(void){
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	light_state = (light_state % 4) + 1;
 8000378:	4b36      	ldr	r3, [pc, #216]	@ (8000454 <SysTick_Handler+0xe0>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	f003 0303 	and.w	r3, r3, #3
 8000380:	b2db      	uxtb	r3, r3
 8000382:	3301      	adds	r3, #1
 8000384:	b2da      	uxtb	r2, r3
 8000386:	4b33      	ldr	r3, [pc, #204]	@ (8000454 <SysTick_Handler+0xe0>)
 8000388:	701a      	strb	r2, [r3, #0]

	switch(light_state){
 800038a:	4b32      	ldr	r3, [pc, #200]	@ (8000454 <SysTick_Handler+0xe0>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	3b01      	subs	r3, #1
 8000390:	2b03      	cmp	r3, #3
 8000392:	d85d      	bhi.n	8000450 <SysTick_Handler+0xdc>
 8000394:	a201      	add	r2, pc, #4	@ (adr r2, 800039c <SysTick_Handler+0x28>)
 8000396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039a:	bf00      	nop
 800039c:	080003ad 	.word	0x080003ad
 80003a0:	080003d9 	.word	0x080003d9
 80003a4:	080003f9 	.word	0x080003f9
 80003a8:	08000425 	.word	0x08000425
		case RED:
			GPIOC_ODR |= (1 << 8);
 80003ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000458 <SysTick_Handler+0xe4>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a29      	ldr	r2, [pc, #164]	@ (8000458 <SysTick_Handler+0xe4>)
 80003b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003b6:	6013      	str	r3, [r2, #0]
			GPIOC_ODR &= ~(1 << 6);
 80003b8:	4b27      	ldr	r3, [pc, #156]	@ (8000458 <SysTick_Handler+0xe4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a26      	ldr	r2, [pc, #152]	@ (8000458 <SysTick_Handler+0xe4>)
 80003be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80003c2:	6013      	str	r3, [r2, #0]
			GPIOC_ODR &= ~(1 << 5);
 80003c4:	4b24      	ldr	r3, [pc, #144]	@ (8000458 <SysTick_Handler+0xe4>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a23      	ldr	r2, [pc, #140]	@ (8000458 <SysTick_Handler+0xe4>)
 80003ca:	f023 0320 	bic.w	r3, r3, #32
 80003ce:	6013      	str	r3, [r2, #0]
			SysTick_Set_Counter(HOLD);
 80003d0:	4822      	ldr	r0, [pc, #136]	@ (800045c <SysTick_Handler+0xe8>)
 80003d2:	f7ff ffb9 	bl	8000348 <SysTick_Set_Counter>
			break;
 80003d6:	e03b      	b.n	8000450 <SysTick_Handler+0xdc>
		case RED_YELLOW:
			GPIOC_ODR |= (1 << 6);
 80003d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000458 <SysTick_Handler+0xe4>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000458 <SysTick_Handler+0xe4>)
 80003de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003e2:	6013      	str	r3, [r2, #0]
			GPIOC_ODR &= ~(1 << 5);
 80003e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000458 <SysTick_Handler+0xe4>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000458 <SysTick_Handler+0xe4>)
 80003ea:	f023 0320 	bic.w	r3, r3, #32
 80003ee:	6013      	str	r3, [r2, #0]
			SysTick_Set_Counter(PAUSE);
 80003f0:	481b      	ldr	r0, [pc, #108]	@ (8000460 <SysTick_Handler+0xec>)
 80003f2:	f7ff ffa9 	bl	8000348 <SysTick_Set_Counter>
			break;
 80003f6:	e02b      	b.n	8000450 <SysTick_Handler+0xdc>
		case GREEN:
			GPIOC_ODR |= (1 << 5);
 80003f8:	4b17      	ldr	r3, [pc, #92]	@ (8000458 <SysTick_Handler+0xe4>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a16      	ldr	r2, [pc, #88]	@ (8000458 <SysTick_Handler+0xe4>)
 80003fe:	f043 0320 	orr.w	r3, r3, #32
 8000402:	6013      	str	r3, [r2, #0]
			GPIOC_ODR &= ~(1 << 8);
 8000404:	4b14      	ldr	r3, [pc, #80]	@ (8000458 <SysTick_Handler+0xe4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a13      	ldr	r2, [pc, #76]	@ (8000458 <SysTick_Handler+0xe4>)
 800040a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800040e:	6013      	str	r3, [r2, #0]
			GPIOC_ODR &= ~(1 << 6);
 8000410:	4b11      	ldr	r3, [pc, #68]	@ (8000458 <SysTick_Handler+0xe4>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a10      	ldr	r2, [pc, #64]	@ (8000458 <SysTick_Handler+0xe4>)
 8000416:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800041a:	6013      	str	r3, [r2, #0]
			SysTick_Set_Counter(HOLD);
 800041c:	480f      	ldr	r0, [pc, #60]	@ (800045c <SysTick_Handler+0xe8>)
 800041e:	f7ff ff93 	bl	8000348 <SysTick_Set_Counter>
			break;
 8000422:	e015      	b.n	8000450 <SysTick_Handler+0xdc>
		case YELLOW:
			GPIOC_ODR |= (1 << 6);
 8000424:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <SysTick_Handler+0xe4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a0b      	ldr	r2, [pc, #44]	@ (8000458 <SysTick_Handler+0xe4>)
 800042a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800042e:	6013      	str	r3, [r2, #0]
			GPIOC_ODR &= ~(1 << 8);
 8000430:	4b09      	ldr	r3, [pc, #36]	@ (8000458 <SysTick_Handler+0xe4>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a08      	ldr	r2, [pc, #32]	@ (8000458 <SysTick_Handler+0xe4>)
 8000436:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800043a:	6013      	str	r3, [r2, #0]
			GPIOC_ODR &= ~(1 << 5);
 800043c:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <SysTick_Handler+0xe4>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a05      	ldr	r2, [pc, #20]	@ (8000458 <SysTick_Handler+0xe4>)
 8000442:	f023 0320 	bic.w	r3, r3, #32
 8000446:	6013      	str	r3, [r2, #0]
			SysTick_Set_Counter(PAUSE);
 8000448:	4805      	ldr	r0, [pc, #20]	@ (8000460 <SysTick_Handler+0xec>)
 800044a:	f7ff ff7d 	bl	8000348 <SysTick_Set_Counter>
	}

}
 800044e:	e7ff      	b.n	8000450 <SysTick_Handler+0xdc>
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	2000001c 	.word	0x2000001c
 8000458:	40020814 	.word	0x40020814
 800045c:	00f42400 	.word	0x00f42400
 8000460:	003d0900 	.word	0x003d0900

08000464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <NMI_Handler+0x4>

0800046c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <HardFault_Handler+0x4>

08000474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <MemManage_Handler+0x4>

0800047c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <BusFault_Handler+0x4>

08000484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <UsageFault_Handler+0x4>

0800048c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
	...

080004b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <SystemInit+0x20>)
 80004be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004c2:	4a05      	ldr	r2, [pc, #20]	@ (80004d8 <SystemInit+0x20>)
 80004c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	e000ed00 	.word	0xe000ed00

080004dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000514 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80004e0:	f7ff ffea 	bl	80004b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004e4:	480c      	ldr	r0, [pc, #48]	@ (8000518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004e6:	490d      	ldr	r1, [pc, #52]	@ (800051c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800050a:	f000 f811 	bl	8000530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800050e:	f7ff fe79 	bl	8000204 <main>
  bx  lr    
 8000512:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000520:	08000598 	.word	0x08000598
  ldr r2, =_sbss
 8000524:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000528:	20000020 	.word	0x20000020

0800052c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC_IRQHandler>
	...

08000530 <__libc_init_array>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	4d0d      	ldr	r5, [pc, #52]	@ (8000568 <__libc_init_array+0x38>)
 8000534:	4c0d      	ldr	r4, [pc, #52]	@ (800056c <__libc_init_array+0x3c>)
 8000536:	1b64      	subs	r4, r4, r5
 8000538:	10a4      	asrs	r4, r4, #2
 800053a:	2600      	movs	r6, #0
 800053c:	42a6      	cmp	r6, r4
 800053e:	d109      	bne.n	8000554 <__libc_init_array+0x24>
 8000540:	4d0b      	ldr	r5, [pc, #44]	@ (8000570 <__libc_init_array+0x40>)
 8000542:	4c0c      	ldr	r4, [pc, #48]	@ (8000574 <__libc_init_array+0x44>)
 8000544:	f000 f818 	bl	8000578 <_init>
 8000548:	1b64      	subs	r4, r4, r5
 800054a:	10a4      	asrs	r4, r4, #2
 800054c:	2600      	movs	r6, #0
 800054e:	42a6      	cmp	r6, r4
 8000550:	d105      	bne.n	800055e <__libc_init_array+0x2e>
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	f855 3b04 	ldr.w	r3, [r5], #4
 8000558:	4798      	blx	r3
 800055a:	3601      	adds	r6, #1
 800055c:	e7ee      	b.n	800053c <__libc_init_array+0xc>
 800055e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000562:	4798      	blx	r3
 8000564:	3601      	adds	r6, #1
 8000566:	e7f2      	b.n	800054e <__libc_init_array+0x1e>
 8000568:	08000590 	.word	0x08000590
 800056c:	08000590 	.word	0x08000590
 8000570:	08000590 	.word	0x08000590
 8000574:	08000594 	.word	0x08000594

08000578 <_init>:
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	bf00      	nop
 800057c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057e:	bc08      	pop	{r3}
 8000580:	469e      	mov	lr, r3
 8000582:	4770      	bx	lr

08000584 <_fini>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	bf00      	nop
 8000588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058a:	bc08      	pop	{r3}
 800058c:	469e      	mov	lr, r3
 800058e:	4770      	bx	lr
